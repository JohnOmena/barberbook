{
    "name":  "wa-final02 (import)",
    "nodes":  [
                  {
                      "name":  "LoadState",
                      "type":  "n8n-nodes-base.redis",
                      "typeVersion":  1,
                      "parameters":  {
                                         "operation":  "get",
                                         "key":  "=state:{{$json.chatId}}"
                                     },
                      "position":  [
                                       980,
                                       420
                                   ],
                      "disabled":  false
                  },
                  {
                      "name":  "Carry_Base",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "return items;"
                                     },
                      "position":  [
                                       980,
                                       540
                                   ]
                  },
                  {
                      "name":  "Merge_Load",
                      "type":  "n8n-nodes-base.merge",
                      "typeVersion":  1,
                      "parameters":  {
                                         "mode":  "passThrough"
                                     },
                      "position":  [
                                       1240,
                                       480
                                   ]
                  },
                  {
                      "name":  "Parse_State",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "let state=null;try{if(typeof $json.value===\u0027string\u0027\u0026\u0026$json.value.trim())state=JSON.parse($json.value);}catch(e){}const statePresent=!!state;return [{json:{...$json,state,statePresent}}];"
                                     },
                      "position":  [
                                       1500,
                                       480
                                   ]
                  },
                  {
                      "name":  "HasState",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.statePresent}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       1760,
                                       480
                                   ]
                  },
                  {
                      "name":  "PickOption",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "const t = String($json.text||\"\").trim();\nconst m = t.match(/\\d+/);\nconst n = m ? parseInt(m[0],10) : NaN;\nconst st = ($json.state \u0026\u0026 typeof $json.state === \u0027object\u0027) ? $json.state : {};\nconst arr = Array.isArray(st.slots) ? st.slots : [];\nlet ok=false, start=null, cancelRequested=false;\nif(Number.isInteger(n)){\n  if(n===0){ cancelRequested=true; }\n  else if(n\u003e=1 \u0026\u0026 n\u003c=arr.length){ start = (arr[n-1] \u0026\u0026 (arr[n-1].startUtc || null)) || null; ok = !!start; }\n}\nconst sid = (st.serviceId || $json.serviceId || \"\");\nconst sname = (st.serviceName || $json.serviceName || \"\");\nconst date = (st.date || $json.date || \"\");\nreturn [{ json: { ...$json, optionValid: ok, cancelRequested, selectedStartUtc: start, serviceId: sid, serviceName: sname, date } }];"
                                     },
                      "position":  [
                                       2020,
                                       420
                                   ]
                  },
                  {
                      "name":  "IfCancel_AG",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.cancelRequested}}",
                                                                                "value2":  true
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       2140,
                                       500
                                   ]
                  },
                  {
                      "name":  "WAHA_Cancel_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "={\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Ok, cancelado. Envie outro servi\\u00e7o ou data se quiser tentar novamente.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       2400,
                                       540
                                   ]
                  },
                  {
                      "name":  "API_Book",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://barberbook-api:8080/api/book",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "fullResponse":  true,
                                                         "ignoreResponseCode":  true
                                                     },
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "={\"tenantId\":\"{{$json.id || $json.tenantId || \u0027\u0027}}\",\"serviceId\":\"{{$json.serviceId}}\",\"startUtc\":\"{{$json.selectedStartUtc}}\",\"clientName\":\"{{$json.pushName || \u0027Cliente\u0027}}\",\"clientContact\":\"{{$json.chatId}}\"}"
                                     },
                      "position":  [
                                       2280,
                                       420
                                   ]
                  },
                  {
                      "name":  "API_Tenant",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "GET",
                                         "url":  "http://barberbook-api:8080/api/tenant-default",
                                         "jsonParameters":  true
                                     },
                      "position":  [
                                       2140,
                                       500
                                   ]
                  },
                  {
                      "name":  "Merge_Tenant",
                      "type":  "n8n-nodes-base.merge",
                      "typeVersion":  1,
                      "parameters":  {
                                         "mode":  "combine"
                                     },
                      "position":  [
                                       2400,
                                       500
                                   ]
                  },
                  {
                      "name":  "Conflict409",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "number":  [
                                                                           {
                                                                               "operation":  "equal",
                                                                               "value1":  "={{$json.statusCode}}",
                                                                               "value2":  409
                                                                           }
                                                                       ]
                                                        }
                                     },
                      "position":  [
                                       2540,
                                       420
                                   ]
                  },
                  {
                      "name":  "WAHA_Conflict",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "={\"session\":\"{{$json.session || \u0027default\u0027}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Esse horário esgotou agora. Quer ver outras opções?\",\"reply_to\":\"{{$json.messageId || \u0027\u0027}}\"}"
                                     },
                      "position":  [
                                       2800,
                                       400
                                   ]
                  },
                  {
                      "name":  "WAHA_Confirmed",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "={\"session\":\"{{$json.session || \u0027default\u0027}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Agendado: {{$json.serviceName}} às {{(new Date((($json.body \u0026\u0026 $json.body.startsAt) ? $json.body.startsAt : $json.selectedStartUtc))).toTimeString().slice(0,5)}}. ID: {{ (($json.body \u0026\u0026 $json.body.id) ? $json.body.id : $json.id) }}. Para cancelar, responda: cancelar {{ (($json.body \u0026\u0026 $json.body.id) ? $json.body.id : $json.id) }}.\",\"reply_to\":\"{{$json.messageId || \u0027\u0027}}\"}"
                                     },
                      "position":  [
                                       2800,
                                       460
                                   ]
                  },
                  {
                      "name":  "ClearState",
                      "type":  "n8n-nodes-base.redis",
                      "typeVersion":  1,
                      "parameters":  {
                                         "operation":  "del",
                                         "key":  "=state:{{$json.chatId}}"
                                     },
                      "position":  [
                                       3060,
                                       460
                                   ],
                      "disabled":  false
                  },
                  {
                      "name":  "Status2xx_AG",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "number":  [
                                                                           {
                                                                               "operation":  "largerEqual",
                                                                               "value1":  "={{$json.statusCode}}",
                                                                               "value2":  200
                                                                           },
                                                                           {
                                                                               "operation":  "smaller",
                                                                               "value1":  "={{$json.statusCode}}",
                                                                               "value2":  300
                                                                           }
                                                                       ]
                                                        }
                                     },
                      "position":  [
                                       2660,
                                       460
                                   ]
                  },
                  {
                      "name":  "WAHA_Invalid_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "={\"session\":\"{{$json.session || \u0027default\u0027}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Opção inválida. Responda com o número do horário (1..5) ou 0 para cancelar.\",\"reply_to\":\"{{$json.messageId || \u0027\u0027}}\"}"
                                     },
                      "position":  [
                                       2920,
                                       500
                                   ]
                  },
                  {
                      "name":  "Gemini_Intent",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "responseFormat":  "json",
                                                         "ignoreResponseCode":  true
                                                     },
                                         "headerParametersJson":  "{\"x-goog-api-key\":\"AIzaSyAQdhMQ-aMy0H7rW3QuQ29nhImz5GhlYLY\",\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"contents\":[{\"role\":\"user\",\"parts\":[{\"text\":\"Classifique a intencao desta mensagem (PT-BR). Responda APENAS JSON {\\\"intent\\\":\\\"agendar|cancelar|remarcar|outro\\\",\\\"service\\\":string|null,\\\"date\\\":YYYY-MM-DD|null}. Mensagem: {{$json.text}}\"}]}],\"generationConfig\":{\"responseMimeType\":\"application/json\"}}"
                                     },
                      "position":  [
                                       2020,
                                       560
                                   ]
                  },
                  {
                      "name":  "Parse_AI",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "let s=\u0027\u0027;try{const c=$json.candidates||[];if(c[0]?.content?.parts?.[0]?.text!=null)s=c[0].content.parts[0].text;else if($json.content?.parts?.[0]?.text)s=$json.content.parts[0].text;}catch(e){}let parsed={};const t=String(s||\u0027\u0027).trim();try{parsed=JSON.parse(/\\{[\\s\\S]*\\}/.exec(t)?.[0]||t);}catch(e){parsed={};}let intent=parsed.intent;const allowed=[\u0027agendar\u0027,\u0027cancelar\u0027,\u0027remarcar\u0027,\u0027outro\u0027];if(!allowed.includes(intent))intent=\u0027outro\u0027;const service=(parsed.service===null||typeof parsed.service===\u0027string\u0027)?parsed.service:null;let date=parsed.date??null;if(typeof date===\u0027string\u0027){const m=date.match(/^(\\d{4}-\\d{2}-\\d{2})/);date=m?m[1]:null;}else date=null;return [{json:{...$json,intent,service,date}}];"
                                     },
                      "position":  [
                                       2280,
                                       560
                                   ]
                  },
                  {
                      "name":  "Carry_IA",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "return items;"
                                     },
                      "position":  [
                                       2020,
                                       640
                                   ]
                  },
                  {
                      "name":  "Merge_IA",
                      "type":  "n8n-nodes-base.merge",
                      "typeVersion":  1,
                      "parameters":  {
                                         "mode":  "combine"
                                     },
                      "position":  [
                                       2540,
                                       600
                                   ]
                  },
                  {
                      "name":  "Intent",
                      "type":  "n8n-nodes-base.switch",
                      "typeVersion":  1,
                      "parameters":  {
                                         "value1":  "={{$json.intent}}",
                                         "rules":  [
                                                       {
                                                           "operation":  "equal",
                                                           "value2":  "agendar"
                                                       },
                                                       {
                                                           "operation":  "equal",
                                                           "value2":  "cancelar"
                                                       },
                                                       {
                                                           "operation":  "equal",
                                                           "value2":  "remarcar"
                                                       },
                                                       {
                                                           "operation":  "equal",
                                                           "value2":  "outro"
                                                       }
                                                   ]
                                     },
                      "position":  [
                                       2800,
                                       600
                                   ]
                  },
                  {
                      "name":  "API_Services_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "GET",
                                         "url":  "http://barberbook-api:8080/api/services",
                                         "jsonParameters":  true
                                     },
                      "position":  [
                                       0,
                                       0
                                   ]
                  },
                  {
                      "name":  "Gemini_ServiceMatch_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "responseFormat":  "json",
                                                         "ignoreResponseCode":  true
                                                     },
                                         "headerParametersJson":  "{\"x-goog-api-key\":\"AIzaSyAQdhMQ-aMy0H7rW3QuQ29nhImz5GhlYLY\",\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"contents\":[{\"role\":\"user\",\"parts\":[{\"text\":\"Saida apenas JSON {\\\"matchName\\\": string|null}. Texto: {{$json.text}}\"}]}],\"generationConfig\":{\"responseMimeType\":\"application/json\"}}"
                                     },
                      "position":  [
                                       0,
                                       120
                                   ]
                  },
                  {
                      "name":  "Merge_Services_AI_AG",
                      "type":  "n8n-nodes-base.merge",
                      "typeVersion":  1,
                      "parameters":  {
                                         "mode":  "combine"
                                     },
                      "position":  [
                                       160,
                                       60
                                   ]
                  },
                  {
                      "name":  "MapServiceId_AG",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "const names=($json.services||$json||[]).map?.(s=\u003e({id:s.id,name:s.name}))||[];const ai=$json||{};const raw=ai.matchName||ai.name||\u0027\u0027;const match=String(raw).toLowerCase();let found=null;for(const s of names){if((s.name||\u0027\u0027).toLowerCase()===match){found=s;break;}}return [{json:{...$json,services:names,found:!!found,serviceId:found?.id||\u0027\u0027,serviceName:found?.name||\u0027\u0027}}];"
                                     },
                      "position":  [
                                       320,
                                       60
                                   ]
                  },
                  {
                      "name":  "IfServiceMatched_AG",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.found}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       480,
                                       60
                                   ]
                  },
                  {
                      "name":  "Gemini_DateNormalize_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "responseFormat":  "json",
                                                         "ignoreResponseCode":  true
                                                     },
                                         "headerParametersJson":  "{\"x-goog-api-key\":\"AIzaSyAQdhMQ-aMy0H7rW3QuQ29nhImz5GhlYLY\",\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"contents\":[{\"role\":\"user\",\"parts\":[{\"text\":\"Saida apenas JSON {\\\"date\\\": \\\"YYYY-MM-DD\\\"|null}. Base: {{$json.text}} {{$json.date||\u0027\u0027}}\"}]}],\"generationConfig\":{\"responseMimeType\":\"application/json\"}}"
                                     },
                      "position":  [
                                       640,
                                       0
                                   ]
                  },
                  {
                      "name":  "ApplyDate_AG",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "let d=$json.date||($json.candidates?.[0]?.content?.parts?.[0]?.text)||\u0027\u0027;try{if(typeof d===\u0027string\u0027\u0026\u0026d.trim().startsWith(\u0027{\u0027)){d=JSON.parse(d).date||\u0027\u0027;}}catch{};const ok=/^\\d{4}-\\d{2}-\\d{2}$/.test(d);return [{json:{...$json,date:d,validDate:ok}}];"
                                     },
                      "position":  [
                                       800,
                                       0
                                   ]
                  },
                  {
                      "name":  "IfDateValid_AG",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.validDate}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       960,
                                       0
                                   ]
                  },
                  {
                      "name":  "WAHA_DateInvalid_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Data invalida. Use YYYY-MM-DD.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       1120,
                                       -80
                                   ]
                  },
                  {
                      "name":  "API_Slots_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "GET",
                                         "url":  "http://barberbook-api:8080/api/slots?serviceId={{$json.serviceId}}\u0026date={{$json.date}}",
                                         "jsonParameters":  true
                                     },
                      "position":  [
                                       1120,
                                       60
                                   ]
                  },
                  {
                      "name":  "FormatSlots_AG",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "const raw=$json.body||$json.data||$json.result||$json.slots||[];const a=Array.isArray(raw)?raw:(raw.slots||[]);const top=(a||[]).slice(0,5);function hhmm(x){try{return new Date(x).toISOString().slice(11,16);}catch{return x||\u0027\u0027}}const slots=top.map((s,i)=\u003e({startUtc:s.startUtc||s.start||s.startISO||s.start_time,endUtc:s.endUtc||s.end||s.endISO||s.end_time,display:s.display||hhmm(s.startUtc)}));const listText=slots.map((s,i)=\u003e`${i+1}) ${s.display}`).join(\u0027\\n\u0027);return [{json:{...$json,slots,listText,hasSlots:slots.length\u003e0}}];"
                                     },
                      "position":  [
                                       1280,
                                       60
                                   ]
                  },
                  {
                      "name":  "IfHasSlots_AG",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.hasSlots}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       1440,
                                       60
                                   ]
                  },
                  {
                      "name":  "WAHA_NoSlots_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Sem horarios nesse dia. Quer tentar outra data?\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       1600,
                                       0
                                   ]
                  },
                  {
                      "name":  "SaveState_AG",
                      "type":  "n8n-nodes-base.redis",
                      "typeVersion":  1,
                      "parameters":  {
                                         "operation":  "set",
                                         "key":  "state:{{$json.chatId}}",
                                         "value":  "={{JSON.stringify($json)}}",
                                         "ttl":  1800
                                     },
                      "position":  [
                                       1600,
                                       120
                                   ],
                      "disabled":  false
                  },
                  {
                      "name":  "WAHA_List_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Escolha:\\n{{$json.listText}}\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       1760,
                                       120
                                   ]
                  },
                  {
                      "name":  "WAHA_ServiceNotFound_AG",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Nao encontrei esse servico. Envie o nome exato.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       640,
                                       120
                                   ]
                  },
                  {
                      "name":  "ExtractIdOrTime_CA",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "const t=String($json.text||\u0027\u0027);const id=(t.match(/[0-9a-fA-F-]{8,}/)||[])[0];const hhmm=(t.match(/\\b([01]?\\d|2[0-3]):[0-5]\\d\\b/)||[])[0];return [{json:{...$json,appointmentId:id||\u0027\u0027,needIdTime:!(id||hhmm)}}];"
                                     },
                      "position":  [
                                       0,
                                       300
                                   ]
                  },
                  {
                      "name":  "IfNeedIdTime_CA",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.needIdTime}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       160,
                                       300
                                   ]
                  },
                  {
                      "name":  "WAHA_AskIdTime_CA",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Envie o codigo/horario.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       320,
                                       240
                                   ]
                  },
                  {
                      "name":  "API_Cancel_CA",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://barberbook-api:8080/api/cancel",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "fullResponse":  true
                                                     },
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"appointmentId\":\"{{$json.appointmentId || \u0027\u0027}}\",\"reason\":\"Solicitado via WhatsApp\"}"
                                     },
                      "position":  [
                                       320,
                                       360
                                   ]
                  },
                  {
                      "name":  "IfStatus200_CA",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "number":  [
                                                                           {
                                                                               "value1":  "={{$json.statusCode}}",
                                                                               "operation":  "equal",
                                                                               "value2":  200
                                                                           }
                                                                       ]
                                                        }
                                     },
                      "position":  [
                                       480,
                                       360
                                   ]
                  },
                  {
                      "name":  "WAHA_CancelOK_CA",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Cancelado.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       640,
                                       320
                                   ]
                  },
                  {
                      "name":  "WAHA_CancelFail_CA",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Nao consegui cancelar.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       640,
                                       400
                                   ]
                  },
                  {
                      "name":  "IfDateMissing_RM",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "string":  [
                                                                           {
                                                                               "value1":  "={{$json.date}}",
                                                                               "operation":  "isEmpty"
                                                                           }
                                                                       ]
                                                        }
                                     },
                      "position":  [
                                       0,
                                       520
                                   ]
                  },
                  {
                      "name":  "WAHA_AskDate_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Qual a nova data? (YYYY-MM-DD)\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       160,
                                       460
                                   ]
                  },
                  {
                      "name":  "Gemini_DateNormalize_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "responseFormat":  "json"
                                                     },
                                         "headerParametersJson":  "{\"x-goog-api-key\":\"AIzaSyAQdhMQ-aMy0H7rW3QuQ29nhImz5GhlYLY\",\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"contents\":[{\"role\":\"user\",\"parts\":[{\"text\":\"Saida apenas JSON {\\\"date\\\": \\\"YYYY-MM-DD\\\"|null}. Base: {{$json.text}} {{$json.date||\u0027\u0027}}\"}]}],\"generationConfig\":{\"responseMimeType\":\"application/json\"}}"
                                     },
                      "position":  [
                                       160,
                                       580
                                   ]
                  },
                  {
                      "name":  "ApplyDate_RM",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "let d=$json.date||\u0027\u0027;try{if(typeof d===\u0027string\u0027\u0026\u0026d.trim().startsWith(\u0027{\u0027)){d=JSON.parse(d).date||\u0027\u0027;}}catch{};const ok=/^\\d{4}-\\d{2}-\\d{2}$/.test(d);return [{json:{...$json,date:d,validDateR:ok}}];"
                                     },
                      "position":  [
                                       320,
                                       580
                                   ]
                  },
                  {
                      "name":  "IfDateValid_RM",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.validDateR}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       480,
                                       580
                                   ]
                  },
                  {
                      "name":  "WAHA_DateInvalid_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Data invalida. Use YYYY-MM-DD.\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       640,
                                       520
                                   ]
                  },
                  {
                      "name":  "IfServiceMissing_RM",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "string":  [
                                                                           {
                                                                               "value1":  "={{$json.serviceId}}",
                                                                               "operation":  "isEmpty"
                                                                           }
                                                                       ]
                                                        }
                                     },
                      "position":  [
                                       640,
                                       640
                                   ]
                  },
                  {
                      "name":  "WAHA_AskService_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Qual servico?\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       800,
                                       600
                                   ]
                  },
                  {
                      "name":  "API_Slots_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "GET",
                                         "url":  "http://barberbook-api:8080/api/slots?serviceId={{$json.serviceId}}\u0026date={{$json.date}}",
                                         "jsonParameters":  true
                                     },
                      "position":  [
                                       800,
                                       680
                                   ]
                  },
                  {
                      "name":  "FormatSlots_RM",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "const raw=$json.body||$json.data||$json.result||$json.slots||[];const a=Array.isArray(raw)?raw:(raw.slots||[]);const top=(a||[]).slice(0,5);function hhmm(x){try{return new Date(x).toISOString().slice(11,16);}catch{return x||\u0027\u0027}}const slots=top.map((s,i)=\u003e({startUtc:s.startUtc||s.start||s.startISO||s.start_time,endUtc:s.endUtc||s.end||s.endISO||s.end_time,display:s.display||hhmm(s.startUtc)}));const listText_R=slots.map((s,i)=\u003e`${i+1}) ${s.display}`).join(\u0027\\n\u0027);return [{json:{...$json,slots,listText_R,hasSlotsR:slots.length\u003e0}}];"
                                     },
                      "position":  [
                                       960,
                                       680
                                   ]
                  },
                  {
                      "name":  "IfHasSlots_RM",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.hasSlotsR}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       1120,
                                       680
                                   ]
                  },
                  {
                      "name":  "WAHA_NoSlots_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Sem horarios nesse dia. Quer tentar outra data?\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       1280,
                                       620
                                   ]
                  },
                  {
                      "name":  "SaveState_RM",
                      "type":  "n8n-nodes-base.redis",
                      "typeVersion":  1,
                      "parameters":  {
                                         "operation":  "set",
                                         "key":  "state:{{$json.chatId}}",
                                         "value":  "={{JSON.stringify($json)}}",
                                         "ttl":  1800
                                     },
                      "position":  [
                                       1280,
                                       740
                                   ],
                      "disabled":  false
                  },
                  {
                      "name":  "WAHA_List_RM",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Escolha:\\n{{$json.listText_R}}\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       1440,
                                       740
                                   ]
                  },
                  {
                      "name":  "WAHA_Other",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendText",
                                         "jsonParameters":  true,
                                         "headerParametersJson":  "{\"Content-Type\":\"application/json\"}",
                                         "bodyParametersJson":  "{\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\",\"text\":\"Posso ajudar com agendar, cancelar ou remarcar?\",\"reply_to\":\"{{$json.messageId}}\"}"
                                     },
                      "position":  [
                                       0,
                                       700
                                   ]
                  },
                  {
                      "name":  "Webhook",
                      "type":  "n8n-nodes-base.webhook",
                      "typeVersion":  1,
                      "parameters":  {
                                         "path":  "wa-incoming",
                                         "responseMode":  "responseNode",
                                         "httpMethod":  "POST"
                                     },
                      "position":  [
                                       260,
                                       300
                                   ]
                  },
                  {
                      "name":  "Parse WAHA",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "parameters":  {
                                         "functionCode":  "const items = $input.all();\nfunction get(obj, path){\n  try { return path.split(\".\").reduce((a,k)=\u003e (a \u0026\u0026 a[k] !== undefined ? a[k] : undefined), obj); } catch(e){ return undefined; }\n}\nreturn items.map(item=\u003e{\n  const r = item.json || {};\n  const b = (r.body!=null?r.body:(r.data!=null?r.data:(r.payload!=null?r.payload:(r.message!=null?r.message:(r.msg!=null?r.msg:{})))));\n  const p = (b \u0026\u0026 (b.payload!=null?b.payload:(b.message!=null?b.message:(b.msg!=null?b.msg:(r.payload!=null?r.payload:{})))));\n  const chatId = (b \u0026\u0026 b.chatId) || (p \u0026\u0026 p.chatId) || (p \u0026\u0026 p.from) || (b \u0026\u0026 b.from) || get(b,\"key.remoteJid\") || get(p,\"key.remoteJid\") || \"\";\n  let text = (b \u0026\u0026 b.text) || (b \u0026\u0026 b.body) || (b \u0026\u0026 b.message \u0026\u0026 b.message.text) || (b \u0026\u0026 b.message \u0026\u0026 b.message.conversation) || (b \u0026\u0026 b.messages \u0026\u0026 b.messages[0] \u0026\u0026 b.messages[0].text \u0026\u0026 b.messages[0].text.body) || (p \u0026\u0026 p.text) || (p \u0026\u0026 p.body) || r.text || \"\";\n  if (typeof text !== \"string\") text = (text!=null?JSON.stringify(text):\"\"); else text = text.trim();\n  const fromMe = Boolean((p \u0026\u0026 p.fromMe) || (b \u0026\u0026 b.fromMe) || (r \u0026\u0026 r.fromMe) || false);\n  const pushName = get(r,\"me.pushName\") || get(b,\"me.pushName\") || get(p,\"me.pushName\") || r.pushName || b.pushName || p.pushName || \"\";\n  const messageId = (p \u0026\u0026 p.id) || (b \u0026\u0026 b.id) || get(b,\"key.id\") || get(p,\"key.id\") || \"\";\n  return { json: { chatId, text, fromMe, pushName, messageId, session: \"default\" } };\n});"
                                     },
                      "position":  [
                                       520,
                                       300
                                   ]
                  },
                  {
                      "name":  "fromMe?",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value2":  true,
                                                                                "value1":  "={{$json.fromMe}}"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "position":  [
                                       780,
                                       300
                                   ]
                  },
                  {
                      "name":  "WAHA Seen",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "parameters":  {
                                         "method":  "POST",
                                         "url":  "http://waha:3000/api/sendSeen",
                                         "jsonParameters":  true,
                                         "options":  {

                                                     },
                                         "bodyParametersJson":  "={\"session\":\"{{$json.session}}\",\"chatId\":\"{{$json.chatId}}\"}"
                                     },
                      "position":  [
                                       1040,
                                       200
                                   ]
                  },
                  {
                      "name":  "Respond OK (fromMe)",
                      "type":  "n8n-nodes-base.respondToWebhook",
                      "typeVersion":  1,
                      "parameters":  {
                                         "responseCode":  200,
                                         "responseBody":  "OK (fromMe)",
                                         "responseFormat":  "string"
                                     },
                      "position":  [
                                       1300,
                                       200
                                   ]
                  },
                  {
                      "name":  "Respond OK",
                      "type":  "n8n-nodes-base.respondToWebhook",
                      "typeVersion":  1,
                      "parameters":  {
                                         "responseCode":  200,
                                         "responseBody":  "OK",
                                         "responseFormat":  "string"
                                     },
                      "position":  [
                                       1300,
                                       420
                                   ]
                  }
              ],
    "connections":  {
                        "IfServiceMatched_AG":  {
                                                    "main":  [
                                                                 [
                                                                     {
                                                                         "node":  "Gemini_DateNormalize_AG",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     }
                                                                 ],
                                                                 [
                                                                     {
                                                                         "node":  "WAHA_ServiceNotFound_AG",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     }
                                                                 ]
                                                             ]
                                                },
                        "WAHA_ServiceNotFound_AG":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "Respond_OK",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "API_Book":  {
                                         "main":  [
                                                      [
                                                          {
                                                              "node":  "Conflict409",
                                                              "type":  "main",
                                                              "index":  0
                                                          }
                                                      ]
                                                  ]
                                     },
                        "IfDateValid_AG":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "API_Slots_AG",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ],
                                                            [
                                                                {
                                                                    "node":  "WAHA_DateInvalid_AG",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "ApplyDate_AG":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "IfDateValid_AG",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "WAHA_List_AG":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "Respond_OK",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Intent":  {
                                       "main":  [
                                                    [
                                                        {
                                                            "node":  "API_Services_AG",
                                                            "type":  "main",
                                                            "index":  0
                                                        }
                                                    ],
                                                    [

                                                    ],
                                                    [

                                                    ],
                                                    [

                                                    ]
                                                ]
                                   },
                        "WAHA_Confirmed":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "ClearState",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "LoadState":  {
                                          "main":  [
                                                       [
                                                           {
                                                               "node":  "Merge_Load",
                                                               "type":  "main",
                                                               "index":  1
                                                           }
                                                       ]
                                                   ]
                                      },
                        "Merge_Load":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Parse_State",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "Merge_IA":  {
                                         "main":  [
                                                      [
                                                          {
                                                              "node":  "Intent",
                                                              "type":  "main",
                                                              "index":  0
                                                          }
                                                      ]
                                                  ]
                                     },
                        "Gemini_ServiceMatch_AG":  {
                                                       "main":  [
                                                                    [
                                                                        {
                                                                            "node":  "Merge_Services_AI_AG",
                                                                            "type":  "main",
                                                                            "index":  0
                                                                        }
                                                                    ]
                                                                ]
                                                   },
                        "Carry_IA":  {
                                         "main":  [
                                                      [
                                                          {
                                                              "node":  "Merge_IA",
                                                              "type":  "main",
                                                              "index":  0
                                                          }
                                                      ]
                                                  ]
                                     },
                        "Parse_AI":  {
                                         "main":  [
                                                      [
                                                          {
                                                              "node":  "Merge_IA",
                                                              "type":  "main",
                                                              "index":  1
                                                          }
                                                      ]
                                                  ]
                                     },
                        "Merge_Tenant":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "API_Book",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Carry_Base":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Merge_Load",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "MapServiceId_AG":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "IfServiceMatched_AG",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Gemini_DateNormalize_AG":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "ApplyDate_AG",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "PickOption":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "IfCancel_AG",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "fromMe?":  {
                                        "main":  [
                                                     [
                                                         {
                                                             "node":  "WAHA Seen",
                                                             "type":  "main",
                                                             "index":  0
                                                         }
                                                     ],
                                                     [
                                                         {
                                                             "node":  "LoadState",
                                                             "type":  "main",
                                                             "index":  0
                                                         },
                                                         {
                                                             "node":  "Carry_Base",
                                                             "type":  "main",
                                                             "index":  0
                                                         }
                                                     ]
                                                 ]
                                    },
                        "API_Slots_AG":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "FormatSlots_AG",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Conflict409":  {
                                            "main":  [
                                                         [
                                                             {
                                                                 "node":  "WAHA_Conflict",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ],
                                                         [
                                                             {
                                                                 "node":  "Status2xx_AG",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ]
                                                     ]
                                        },
                        "Merge_Services_AI_AG":  {
                                                     "main":  [
                                                                  [
                                                                      {
                                                                          "node":  "MapServiceId_AG",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      }
                                                                  ]
                                                              ]
                                                 },
                        "Status2xx_AG":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "WAHA_Confirmed",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ],
                                                          [
                                                              {
                                                                  "node":  "WAHA_Invalid_AG",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "API_Services_AG":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Gemini_ServiceMatch_AG",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ],
                                                             [
                                                                 {
                                                                     "node":  "Merge_Services_AI_AG",
                                                                     "type":  "main",
                                                                     "index":  1
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "WAHA_NoSlots_AG":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Respond_OK",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Parse_State":  {
                                            "main":  [
                                                         [
                                                             {
                                                                 "node":  "HasState",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ]
                                                     ]
                                        },
                        "IfCancel_AG":  {
                                            "main":  [
                                                         [
                                                             {
                                                                 "node":  "WAHA_Cancel_AG",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ],
                                                         [
                                                             {
                                                                 "node":  "Merge_Tenant",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "API_Tenant",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ]
                                                     ]
                                        },
                        "FormatSlots_AG":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "IfHasSlots_AG",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "API_Tenant":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Merge_Tenant",
                                                                "type":  "main",
                                                                "index":  1
                                                            }
                                                        ]
                                                    ]
                                       },
                        "WAHA_Conflict":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Respond OK",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                          },
                        "SaveState_AG":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "WAHA_List_AG",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "IfHasSlots_AG":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "SaveState_AG",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ],
                                                           [
                                                               {
                                                                   "node":  "WAHA_NoSlots_AG",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                          },
                        "WAHA_Cancel_AG":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "ClearState",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "WAHA_DateInvalid_AG":  {
                                                    "main":  [
                                                                 [
                                                                     {
                                                                         "node":  "Respond_OK",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     }
                                                                 ]
                                                             ]
                                                },
                        "HasState":  {
                                         "main":  [
                                                      [
                                                          {
                                                              "node":  "PickOption",
                                                              "type":  "main",
                                                              "index":  0
                                                          }
                                                      ],
                                                      [
                                                          {
                                                              "node":  "Gemini_Intent",
                                                              "type":  "main",
                                                              "index":  0
                                                          },
                                                          {
                                                              "node":  "Carry_IA",
                                                              "type":  "main",
                                                              "index":  0
                                                          }
                                                      ]
                                                  ]
                                     },
                        "ClearState":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Respond OK",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "Gemini_Intent":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Parse_AI",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                          },
                        "Webhook":  {
                                        "main":  [
                                                     [
                                                         {
                                                             "node":  "Parse WAHA",
                                                             "type":  "main",
                                                             "index":  0
                                                         }
                                                     ]
                                                 ]
                                    },
                        "Parse WAHA":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "fromMe?",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "WAHA Seen":  {
                                          "main":  [
                                                       [
                                                           {
                                                               "node":  "Respond OK (fromMe)",
                                                               "type":  "main",
                                                               "index":  0
                                                           }
                                                       ]
                                                   ]
                                      }
                    },
    "active":  false,
    "settings":  {

                 },
    "staticData":  {

                   }
}
