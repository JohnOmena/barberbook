// <auto-generated />
using System;
using BarberBook.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BarberBook.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829225043_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BarberBook.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientContact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamptz");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StartsAt");

                    b.HasIndex("TenantId", "ProfessionalId", "StartsAt")
                        .IsUnique();

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("BarberBook.Domain.Entities.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("interval");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("interval");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Weekday")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ProfessionalId", "Weekday");

                    b.ToTable("availabilities", (string)null);
                });

            modelBuilder.Entity("BarberBook.Domain.Entities.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Active");

                    b.ToTable("professionals", (string)null);
                });

            modelBuilder.Entity("BarberBook.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BufferMin")
                        .HasColumnType("integer");

                    b.Property<int>("DurationMin")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Active");

                    b.HasIndex("TenantId", "Slug")
                        .IsUnique();

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("BarberBook.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("tenants", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
